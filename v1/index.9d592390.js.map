{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,mCAKA,MAAMC,EAAW,IAAIF,EAAAG,cAGrBD,EAASE,QAAQC,OAAOC,WAAYD,OAAOE,aAG3CC,SAASC,KAAKC,YAAYR,EAASS,YAKnC,MAAMC,EAAQ,IAAIZ,EAAAa,MAGZC,EAAS,IAAId,EAAAe,kBACf,GACEV,OAAOC,WAAaD,OAAOE,YAC3B,GACA,KAKAS,EAAa,IAAIhB,EAAAiB,WAAiB,GAExCL,EAAMM,IAAIF,GAEVF,EAAOK,SAASC,EAAI,EAEpBN,EAAOK,SAASE,KAAI,GAAK,GAAI,IAGf,IAAIC,EAAAC,cAAcT,EAAQZ,EAASS,YAC3Ca,SAGN,MAAMC,EAAc,IAAIzB,EAAA0B,YAClBC,EAAc,IAAI3B,EAAA4B,kBAAwB,CAAEC,MAAO,QACnDC,EAAM,IAAI9B,EAAA+B,KAAWN,EAAaE,GACxCf,EAAMM,IAAIY,GAGV,MAAME,EAAgB,IAAIhC,EAAAiC,cAAoB,GAAI,IAC5CC,EAAgB,IAAIlC,EAAA4B,kBAAwB,CAC9CC,MAAO,SACPM,KAAMnC,EAAAoC,aAEJC,EAAQ,IAAIrC,EAAA+B,KAAWC,EAAeE,GAC5CtB,EAAMM,IAAImB,GAGV,MAAMC,EAAa,IAAItC,EAAAuC,WAAiB,IACxC3B,EAAMM,IAAIoB,GAEVD,EAAMG,SAASC,GAAI,GAAOC,KAAKC,GAG/B,MAAMC,EAAiB,IAAI5C,EAAA6C,eAAqB,EAAG,GAAI,IACjDC,EAAiB,IAAI9C,EAAA4B,kBACvB,CACIC,MAAO,IACPkB,WAAW,IAEbC,EAAS,IAAIhD,EAAA+B,KAAWa,EAAgBE,GAC9ClC,EAAMM,IAAI8B,GACVA,EAAO7B,SAASE,KAAI,GAAI,EAAE,GAK1B,MAAM4B,EAAM,IAAIC,EAAAC,IACVC,EAAU,CACZC,YAAa,UACbN,WAAW,EACXO,MAAO,KAEXL,EAAIM,SAASH,EAAS,eAAeI,UAAS,SAASC,GACnDT,EAAOU,SAAS7B,MAAMR,IAAIoC,MAE9BR,EAAI/B,IAAIkC,EAAS,aAAaI,UAAS,SAASC,GAC5CT,EAAOU,SAASX,UAAYU,KAEhCR,EAAI/B,IAAIkC,EAAS,QAAS,EAAG,IAG7B,IAAIO,EAAO,EAeXzD,EAAS0D,kBAZT,SAAiBC,GACb/B,EAAIU,SAASC,EAAIoB,EAAO,IACxB/B,EAAIU,SAASsB,EAAID,EAAO,IAGxBF,GAAQP,EAAQE,MAChBN,EAAO7B,SAAS2C,EAAI,GAAKpB,KAAKqB,IAAIrB,KAAKsB,IAAIL,IAG3CzD,EAAS+D,OAAOrD,EAAOE","sources":["src/v1/js/scripts.js"],"sourcesContent":["import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport * as dat from 'dat.gui';\n\n// create top object in the hierarchy \nconst renderer = new THREE.WebGLRenderer();\n\n// set size for all window\nrenderer.setSize(window.innerWidth, window.innerHeight);\n\n// add the rendere to the page\ndocument.body.appendChild(renderer.domElement);\n\n\n\n// creating scene\nconst scene = new THREE.Scene();\n\n// creating camera - perspective\nconst camera = new THREE.PerspectiveCamera(\n    45    //fov\n    , window.innerWidth / window.innerHeight // aspect\n    , 0.1   // near\n    , 1000  // far\n);\n\n\n// create axesHelper\nconst axesHelper = new THREE.AxesHelper(3);\n// add to scene\nscene.add(axesHelper);\n// change camera position to see the axesHelper\ncamera.position.z = 5;\n// OR use set method\ncamera.position.set(-10, 30, 30);\n\n// CONTROL CAMERA\nconst orbit = new OrbitControls(camera, renderer.domElement);\norbit.update();\n\n// ADDING A BOX\nconst boxGeomerty = new THREE.BoxGeometry();\nconst boxMaterial = new THREE.MeshBasicMaterial({ color: 0x00FF00 });\nconst box = new THREE.Mesh(boxGeomerty, boxMaterial);\nscene.add(box);\n\n// ADD PLANE\nconst planeGeomerty = new THREE.PlaneGeometry(30, 30);\nconst planeMaterial = new THREE.MeshBasicMaterial({\n    color: 0xFFFFFF,\n    side: THREE.DoubleSide\n});\nconst plane = new THREE.Mesh(planeGeomerty, planeMaterial);\nscene.add(plane);\n\n// ADD GRID \nconst gridHelper = new THREE.GridHelper(30);\nscene.add(gridHelper);\n// fix: plane and grid merged\nplane.rotation.x = -0.5 * Math.PI;\n\n// ADD SPHERE\nconst sphereGeomerty = new THREE.SphereGeometry(4, 50, 50);\nconst sphereMaterial = new THREE.MeshBasicMaterial(\n    {\n        color: 0x0000FF,\n        wireframe: false // makes sphere surface smooth\n    });\nconst sphere = new THREE.Mesh(sphereGeomerty, sphereMaterial);\nscene.add(sphere);\nsphere.position.set(-10,5,5);\n\n// NOTE:  basic material does not require light but other materials do.\n\n// ADD GUI ELEMENTS\nconst gui = new dat.GUI();\nconst options = {\n    sphereColor: '#FFEA00',\n    wireframe: false,\n    speed: 0.01\n};\ngui.addColor(options, 'sphereColor').onChange(function(e){\n    sphere.material.color.set(e);\n});\ngui.add(options, 'wireframe').onChange(function(e){\n    sphere.material.wireframe = e;\n});\ngui.add(options, 'speed', 0, 0.1);\n\n// BOUNCE THE SPHERE\nlet step = 0;\n\n// ROTATE THE BOX IN TIME\nfunction animate(time) {\n    box.rotation.x = time / 1000;\n    box.rotation.y = time / 1000;\n\n    // bouncing logic\n    step += options.speed;\n    sphere.position.y = 10 * Math.abs(Math.sin(step));\n\n    // render using scne and camera\n    renderer.render(scene, camera);\n}\n\nrenderer.setAnimationLoop(animate);\n\n\n\n"],"names":["$ilwiq","parcelRequire","$307eb37b06f56b06$var$renderer","WebGLRenderer","setSize","window","innerWidth","innerHeight","document","body","appendChild","domElement","$307eb37b06f56b06$var$scene","Scene","$307eb37b06f56b06$var$camera","PerspectiveCamera","$307eb37b06f56b06$var$axesHelper","AxesHelper","add","position","z","set","$5Rd1x","OrbitControls","update","$307eb37b06f56b06$var$boxGeomerty","BoxGeometry","$307eb37b06f56b06$var$boxMaterial","MeshBasicMaterial","color","$307eb37b06f56b06$var$box","Mesh","$307eb37b06f56b06$var$planeGeomerty","PlaneGeometry","$307eb37b06f56b06$var$planeMaterial","side","DoubleSide","$307eb37b06f56b06$var$plane","$307eb37b06f56b06$var$gridHelper","GridHelper","rotation","x","Math","PI","$307eb37b06f56b06$var$sphereGeomerty","SphereGeometry","$307eb37b06f56b06$var$sphereMaterial","wireframe","$307eb37b06f56b06$var$sphere","$307eb37b06f56b06$var$gui","$e93rA","GUI","$307eb37b06f56b06$var$options","sphereColor","speed","addColor","onChange","e","material","$307eb37b06f56b06$var$step","setAnimationLoop","time","y","abs","sin","render"],"version":3,"file":"index.9d592390.js.map"}